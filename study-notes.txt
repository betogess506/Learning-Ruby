%w to create an array of strings,

All variables are pointers. Person1 = Person2 will change if Person2 does. Use .dup instead to copy it.

Hashes are just associative arrays (PHP) or dictionaries (Python).
Arrays can be indexed in reverse by using a negative key. E.g. Array[-1] to get the last element of Array[]

Also can index an array using a[start, count] or ranges a[1...3] or a[1..3]. .. is range inclusive, ... is range exclusive. See fig 4.1

A FIFO array can be created by using shift and push.

Use the test library to test your shitsssssss

Remember inject(), collect, each_with_index iterators. Inject is super powerful, can also pass methods like + to it.

Only use 'loop' loops with external iterators because they terminate cleanly.

Enumerators can be created explicitly.!! Remember this.. Page 82

Note of caution for enumerators like select and count for infinite sequences. They tend to iterate through the whole array before returning a result.
To have an enumerator for infinite sequences, you would likely need to make it yourself. Come back to page 84 to understand these after reading through the book.

Study clojures p 87.

Lambdas are great, use instead of procs, can be used to simulate if and while statements.

Gserver example. Check out mixing in Comparable (need to define <=>) or Enumerable (need to define each)

Really need to understand classes more. I get inheritance, mixins however are a little weird. Going to practice with class_test.rb.

Also need to look into symbols as parameters.

Try to move away from inheritance, and more towards mixins. Avoid is a relationsips, rather, focus on uses a.

Ranges dont take as much memory as most think. a = (1..1_000_000) only contains references to two FixNum numbers, but converting to an array consumes the entire range of memory in FixNum numbers.

In ruby, if you want objects to produce ranges, they must respond to the succ method, returning the next object in the sequence. Objects must also be comparable with <=>

Ranges are very useful for interval testing which is most commonly used with case statements. e.g. (1..5) === 3 #=> true	

REGULAR EXPRESIONS~~~~

sub only matches/replaces the first match it comes across, to replace all matches use gsub.

The following are equivilant:
/mm\/dd/ # => /mm\/dd/
Regexp.new("mm/dd") # => /mm\/dd/
%r{mm/dd} # => /mm\/dd/

all characters match themselves except ., |, (, ), [, ], {,
}, +, \, ^, $, *, and ?

